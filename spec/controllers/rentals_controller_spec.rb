require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe RentalsController, type: :controller do
  let(:valid_file) {
    Rack::Test::UploadedFile.new 'spec/support/valid_positions.csv'
  }

  let(:valid_params) {
    {
      rental: {
        name: 'Valid',
        positions_file: valid_file
      }
    }
  }

  let(:invalid_params) {
    {
      rental: {
        name: 'Invalid',
        positions: {}
      }
    }
  }

  # This should return the minimal set of attributes required to create a valid
  # Rental. As you add validations to Rental, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      name: 'Valid',
      positions: {
        start_position: { time: 1472829721, lat: 48.09197, lng: -1.65535 },
        end_position: { time: 1472829721, lat: 48.09197, lng: -1.65535 },
        transit_positions: []
      }
    }
  }

  let(:invalid_attributes) {
    {
      name: 'valid',
      positions: nil
    }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # RentalsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all rentals as @rentals" do
      rental = Rental.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(assigns(:rentals)).to eq([rental])
    end
  end

  describe "GET #show" do
    it "assigns the requested rental as @rental" do
      rental = Rental.create! valid_attributes
      get :show, params: {id: rental.to_param}, session: valid_session
      expect(assigns(:rental)).to eq(rental)
    end
  end

  describe "GET #new" do
    it "assigns a new rental as @rental" do
      get :new, params: {}, session: valid_session
      expect(assigns(:rental)).to be_a_new(Rental)
    end
  end

  describe "GET #edit" do
    it "assigns the requested rental as @rental" do
      rental = Rental.create! valid_attributes
      get :edit, params: {id: rental.to_param}, session: valid_session
      expect(assigns(:rental)).to eq(rental)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Rental" do
        expect {
          post :create, params: valid_params, session: valid_session
        }.to change(Rental, :count).by(1)
      end

      it "assigns a newly created rental as @rental" do
        post :create, params: valid_params, session: valid_session
        expect(assigns(:rental)).to be_a(Rental)
        expect(assigns(:rental)).to be_persisted
      end

      it "redirects to the created rental" do
        post :create, params: valid_params, session: valid_session
        expect(response).to redirect_to(Rental.last)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved rental as @rental" do
        post :create, params: invalid_params, session: valid_session
        expect(assigns(:rental)).to be_a_new(Rental)
      end

      it "re-renders the 'new' template" do
        post :create, params: invalid_params, session: valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do

      it "updates the requested rental" do
        rental = Rental.create! valid_attributes
        put :update, params: valid_params.merge(id: rental.to_param), session: valid_session
        rental.reload
        skip("Add assertions for updated state")
      end

      it "assigns the requested rental as @rental" do
        rental = Rental.create! valid_attributes
        put :update, params: valid_params.merge(id: rental.to_param), session: valid_session
        expect(assigns(:rental)).to eq(rental)
      end

      it "redirects to the rental" do
        rental = Rental.create! valid_attributes
        put :update, params: valid_params.merge(id: rental.to_param), session: valid_session
        expect(response).to redirect_to(rental)
      end
    end

    context "with invalid params" do
      it "assigns the rental as @rental" do
        rental = Rental.create! valid_attributes
        put :update, params: invalid_params.merge(id: rental.to_param), session: valid_session
        expect(assigns(:rental)).to eq(rental)
      end

      it "re-renders the 'edit' template" do
        rental = Rental.create! valid_attributes
        put :update, params: invalid_params.merge(id: rental.to_param), session: valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested rental" do
      rental = Rental.create! valid_attributes
      expect {
        delete :destroy, params: {id: rental.to_param}, session: valid_session
      }.to change(Rental, :count).by(-1)
    end

    it "redirects to the rentals list" do
      rental = Rental.create! valid_attributes
      delete :destroy, params: {id: rental.to_param}, session: valid_session
      expect(response).to redirect_to(rentals_url)
    end
  end

end
